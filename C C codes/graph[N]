rr str[N];

double ans = 0;
double A[N];
map<int , int> size;
int dfs(int from){
	// error(from);
	// int x; cin >> x;
	// if(!sz(graph[from])) return 0;
	int ans = 1;
	R(i, sz(graph[from])){
		ans += dfs(graph[from][i]); 
	}
	size[from] = ans;
	return ans;
}


int dfs(int from, double last){
	// if(sz(graph[from])) return 0;
	int total = 0;
	R(i, sz(graph[from])){
		total += size[graph[from][i]];
	}
	R(i, sz(graph[from])){
		A[graph[from][i]] = last + 1 + 0.5 * (total - size[graph[from][i]]);
		dfs(graph[from][i], A[graph[from][i]]);
	}
	return 0;
}

int main(){
	cout.precision(8);
	cout << fixed;
	std::ios::sync_with_stdio(false);
	// fr;
	sc(n); R(i, n - 1){
		cin >> k; 
		graph[k].pb(i+2);
	}

	dfs(1);
	A[1] = 1.0;
	dfs(1, 1.0);
	R(i, n) cout << A[i + 1] << " ";
	return 0;
} str[N];

double ans = 0;
double A[N];
map<int , int> size;
int dfs(int from){
	error(from);
	// int x; cin >> x;
	// if(!sz(graph[from])) return 0;
	int ans = 1;
	R(i, sz(graph[from])){
		ans += dfs(graph[from][i]); 
	}
	size[from] = ans;
	return ans;
}


int dfs(int from, double last){
	// if(sz(graph[from])) return 0;
	int total = 0;
	R(i, sz(graph[from])){
		total += size[graph[from][i]];
	}
	R(i, sz(graph[from])){
		A[graph[from][i]] = last + 1 + 0.5 * (total - size[graph[from][i]]);
		dfs(graph[from][i], A[graph[from][i]]);
	}
	return 0;
}

int main(){
	cout.precision(8);
	cout << fixed;
	std::ios::sync_with_stdio(false);
	// fr;
	sc(n); R(i, n - 1){
		cin >> k; 
		graph[k].pb(i+2);
	}

	dfs(1);
	for(auto el: size){
		cout << el.fi _ el.se << endl;
	}
	A[1] = 1.0;
	dfs(1, 1.0);
	R(i, n) cout << A[i + 1] << " ";
	return 0;
}
